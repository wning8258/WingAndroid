apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "tasks.gradle"
//task depends相关
apply from: "taskDepends.gradle"
apply from: "taskDependsHandleReleaseFile.gradle"
apply from: "taskMustRunAfter.gradle"
apply from: "ext.gradle"
//apply from: "releaseInfo.gradle"
//自己写的插件
//apply plugin: 'com.wing.android.gradle'  //增加自己实现的插件，名字x为插件module META_INF/gradle-plugins/下的x.properties
apply plugin: "com.wing.plugin"
//aspectjx
//apply plugin: 'android-aspectjx'
//
//aspectjx {
//    enabled false
//    exclude 'com.google.firebase', 'com.google.android'
//    exclude 'versions.9'
//    exclude 'com.squareup'
//    exclude 'leakcanary'
//    exclude 'blockcanary'
//    exclude 'com.taobao'
//    exclude 'com.ut'
//    exclude 'androidx'
//    exclude 'NBSAgent'
//    exclude 'okhttp'
//    exclude 'androidx', 'com.google', 'com.squareup', 'com.alipay', 'com.taobao',
//            'org.apache',
//            'org.jetbrains.kotlin',
//            "module-info", 'versions.9'
//
//}
//友盟apm 启动插件
apply plugin: 'com.efs.sdk.plugin'

//efs {
//    //是否对启动过程进程插桩的开关，如果使用自动集成监控则必须开启，false则不开启启动插件
//    isAutoTrack = true
//    //您自定义Application的类名称，必填项，如没有自定义则填写系统Application
//    applicationName = "com.wing.android"
//    //您自定义Activity的类名称，必填项，将您所有用于页面展示的Activity的类名按如下格式填写，否则会丢失热启动
//    activityList = [
//            "MainActivity2",
//            //......
//    ]
//}

repositories {
    mavenCentral()
}



def mCompileSdkVersion = 31

def libAndroidAppcompat = "androidx.appcompat:appcompat:1.2.0"
/**
 * 定义扩展属性
 */
//ext {
//    targetSdkVersion1 = 29
//}

ReleaseInfo {
    versionName = rootProject.ext.versionName1
    versionCode = rootProject.ext.versionCode1
    versionInfo = "第4个版本，使用releaseInfo 自定义extension"
    fileName = "release-info.xml"
}
//自己写的extension,给name重新赋值
//hello {
//   name "i am wning!!!!!!!!!!!!!!!!"
//}


this.afterEvaluate { Project project ->
    /**
     * http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/advanced_build_customization/manipulation_taskstask.html
     */
    this.android.applicationVariants.all {variant ->
        def name = variant.name
        def baseName = variant.baseName
        println "the name is $name, this baseName $baseName"
        //the name is QQDebug, this baseName QQ-debug
        //the name is QQRelease, this baseName QQ-release
        //the name is BaiduDebug, this baseName Baidu-debug
        //the name is BaiduRelease, this baseName Baidu-release
        //the name is HUAWEIDebug, this baseName HUAWEI-debug
        //the name is HUAWEIRelease, this baseName HUAWEI-release

        def apkName ="app-${variant.baseName}-${variant.versionName}.apk"
        /**
         *  不能直接通过output.outputFile设置，会报错了
         *  Cannot set the value of read-only property 'outputFile' for ApkVariantOutputImpl_Decorated
         */
//        def output = variant.outputs.first()
//        output.outputFile = new File(output.outputFile.parent,apkName)
//        println output.outputFile.name

        variant.outputs.all {
            outputFileName = apkName
            println "outputFileName is ${outputFileName}"
            //outputFileName is app-QQ-debug-1.0.apk
            def task = variant.checkManifest
            println "checkManifest name is ${task.name}"
            //checkManifest name is checkQQDebugManifest
            //checkManifest name is checkQQReleaseManifest
        }
    }
}

/**
 * 所有可定义的属性，在BaseExtension中
 */
android {
    compileSdkVersion mCompileSdkVersion
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.wing.android"
        minSdkVersion mMinSdkVersion1
        targetSdkVersion this.targetSdkVersion1
        versionCode 1
        versionName "1.0"
        flavorDimensions "1.0"

        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        multiDexEnabled true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }



    buildFeatures {
        dataBinding true
        viewBinding true
    }


    useLibrary 'org.apache.http.legacy'  //6.0以上使用httpclient



    sourceSets {
        main {
            //修改jni libs的so文件存放位置到libs目录
            jniLibs.srcDirs  = ["libs"]
            //修改资源文件夹
            res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player']
        }
    }

    productFlavors {
        Baidu {

        }
//        QQ {
//
//        }
//        HUAWEI{
//
//        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }


    ndkVersion '21.3.6528147'

    configurations.all {
        resolutionStrategy {
            force 'androidx.core:core:1.8.0'
            force 'androidx.core:core-ktx:1.8.0'
        }
    }

}
/**
 * 在外边修改也可以
 */
//this.android.sourceSets {
//    main {
//        //修改jni libs的so文件存放位置到libs目录
//        jniLibs.srcDirs  = ["libs"]
//        //修改资源文件夹
//        res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player']
//    }
//}

dependencies {
    implementation project(':module_groovy')
    implementation project(':module_volley')
    implementation project(':wingannotation') //编译时注解
    annotationProcessor project(':wingannotation')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libAndroidAppcompat
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "androidx.core:core-ktx:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'org.ow2.asm:asm:9.0-beta'
    implementation 'org.ow2.asm:asm-commons:9.0-beta'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'




    implementation 'com.android.support:multidex:1.0.1'



    implementation googleDependencies.support_v4
    implementation googleDependencies.appcompat_v7
    implementation googleDependencies.design
    implementation googleDependencies.annotation

    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    implementation otherDependencies.nineoldandroids //动画兼容2.3
    implementation otherDependencies.fresco //fresco
    implementation otherDependencies.rebound //弹性动画库
    implementation otherDependencies.okhttp//okhttp

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
// (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'

    implementation otherDependencies.gson
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'


    // debugImplementation 'com.amitshekhar.android:debug-db:1.0.0' //浏览器中查看数据库
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'

    // 替换成最新版本, 需要注意的是api
    // 要与compiler匹配使用，均使用最新版可以保证兼容
    implementation 'com.alibaba:arouter-api:1.5.2'
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.2'


    implementation 'com.google.dagger:dagger:2.25.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.25.2'


    def lifecycle_version = "2.5.1"
    def activityVersion = "1.6.1"

    // ViewModel and LiveData


    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
//    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    // Lifecycle utilities for Compose
//    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")

    // Saved state module for ViewModel
//    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")

    // Annotation processor
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")


    implementation("androidx.activity:activity-ktx:$activityVersion")


    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime:$lifecycle_version")
    // Annotation processor
    annotationProcessor("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")

//
//    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
//    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"








    //butterknife
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    //rxbinding
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-core:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-appcompat:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-drawerlayout:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-leanback:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-recyclerview:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-slidingpanelayout:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-swiperefreshlayout:3.0.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding-viewpager:3.0.0'

    //eventbus
    implementation 'org.greenrobot:eventbus:3.2.0'



    //https://github.com/CymChad/BaseRecyclerViewAdapterHelper/blob/master/readme/0-BaseRecyclerViewAdapterHelper.md
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.7'





    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
//    debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'
//    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'

    debugImplementation project(':blockcanary:blockcanary-android')
    releaseImplementation project(':blockcanary:blockcanary-android-no-op')

    //aspectj
//    implementation 'org.aspectj:aspectjrt:1.8'

    implementation  'com.umeng.umsdk:common:9.4.7'// 版本号(必选)
    implementation  'com.umeng.umsdk:asms:1.4.1'// asms包依赖(必选)

    implementation 'com.umeng.umsdk:apm:1.6.2'// U-APM产品包依赖(必选)

    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation  'io.github.scwang90:refresh-layout-kernel:2.0.5'      //核心必须依赖

}

this.getParentProject()

def getParentProject() {
    def name = this.getParent().name
    println this.getProject().getName() +"  ,the parent project name is ${name}"
}



/**
 *   ./gradlew apkcopy
 */
//拷贝apk到downloads目录
task("apkcopy") {
    //gradle的执行阶段去执行
    doLast {
        def sourcePath = this.buildDir.path + "/outputs/apk/"
        def destPath = "/Users/gmu/Downloads/apkcopy"
        /**
         * cp [options] source dest
         * -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。
         */
        def command = "cp -r ${sourcePath} ${destPath}"
        this.exec {
            try {
                executable "bash"
                args "-c", command
                println "the command is execute success"
            } catch (GradleException e) {
                println "the command is execute failed"
            }
        }
    }
}


