apply plugin: 'com.android.application'
//apply plugin: 'com.wing.android.gradle'  //增加自己实现的插件，名字x为插件module META_INF/gradle-plugins/下的x.properties
def mCompileSdkVersion = 29

def libAndroidAppcompat = "androidx.appcompat:appcompat:1.2.0"
/**
 * 定义扩展属性
 */
//ext {
//    targetSdkVersion1 = 29
//}
android {
    compileSdkVersion mCompileSdkVersion
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.wing.android"
        minSdkVersion mMinSdkVersion1
        targetSdkVersion this.targetSdkVersion1
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }


    viewBinding {
        enabled = true
    }
}

dependencies {
    implementation project(':module_asm')
    implementation project(':module_groovy')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libAndroidAppcompat
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

/**
 *   ./gradlew apkcopy
 */
//拷贝apk到downloads目录
task("apkcopy") {
    //gradle的执行阶段去执行
    doLast {
        def sourcePath = this.buildDir.path + "/outputs/apk/"
        def destPath = "/Users/gmu/Downloads/apkcopy"
        /**
         * cp [options] source dest
         * -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。
         */
        def command = "cp -r ${sourcePath} ${destPath}"
        this.exec {
            try {
                executable "bash"
                args "-c", command
                println "the command is execute success"
            } catch (GradleException e) {
                println "the command is execute failed"
            }
        }
    }
}


//计算buid执行时长
def startBuildTime, endBuildTime
/**
 * configure阶段结束后的监听
 * //只监听当前工程的evaluate,监听不到其它工程的，即使是他的子工程
 */
this.afterEvaluate { Project project ->
    def preBuildTask = project.tasks.getByName("preBuild")
    preBuildTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println "the startBuildTime is $startBuildTime"
    }
    def buildTask = project.tasks.getByName("build")
    buildTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println "the endBuildTime is $endBuildTime"
        println "the build time is ${endBuildTime - startBuildTime}"
    }
}

