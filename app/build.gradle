apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "tasks.gradle"
//task depends相关
apply from: "taskDepends.gradle"
apply from: "taskDependsHandleReleaseFile.gradle"
apply from: "taskMustRunAfter.gradle"
apply from: "ext.gradle"
//apply from: "releaseInfo.gradle"
apply plugin: 'com.wing.android.gradle'  //增加自己实现的插件，名字x为插件module META_INF/gradle-plugins/下的x.properties
apply plugin: "com.wing.plugin"
//听云
apply plugin: 'newlens'

repositories {
    mavenCentral()
}



def mCompileSdkVersion = 29

def libAndroidAppcompat = "androidx.appcompat:appcompat:1.2.0"
/**
 * 定义扩展属性
 */
//ext {
//    targetSdkVersion1 = 29
//}

ReleaseInfo {
    versionName = rootProject.ext.versionName1
    versionCode = rootProject.ext.versionCode1
    versionInfo = "第4个版本，使用releaseInfo 自定义extension"
    fileName = "release-info.xml"
}



this.afterEvaluate { Project project ->
    /**
     * http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision/advanced_build_customization/manipulation_taskstask.html
     */
    this.android.applicationVariants.all {variant ->
        def name = variant.name
        def baseName = variant.baseName
        println "the name is $name, this baseName $baseName"
        //the name is QQDebug, this baseName QQ-debug
        //the name is QQRelease, this baseName QQ-release
        //the name is BaiduDebug, this baseName Baidu-debug
        //the name is BaiduRelease, this baseName Baidu-release
        //the name is HUAWEIDebug, this baseName HUAWEI-debug
        //the name is HUAWEIRelease, this baseName HUAWEI-release

        def apkName ="app-${variant.baseName}-${variant.versionName}.apk"
        /**
         *  不能直接通过output.outputFile设置，会报错了
         *  Cannot set the value of read-only property 'outputFile' for ApkVariantOutputImpl_Decorated
         */
//        def output = variant.outputs.first()
//        output.outputFile = new File(output.outputFile.parent,apkName)
//        println output.outputFile.name

        variant.outputs.all {
            outputFileName = apkName
            println "outputFileName is ${outputFileName}"
            //outputFileName is app-QQ-debug-1.0.apk
            def task = variant.checkManifest
            println "checkManifest name is ${task.name}"
            //checkManifest name is checkQQDebugManifest
            //checkManifest name is checkQQReleaseManifest
        }
    }
}

/**
 * 所有可定义的属性，在BaseExtension中
 */
android {
    compileSdkVersion mCompileSdkVersion
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.wing.android"
        minSdkVersion mMinSdkVersion1
        targetSdkVersion this.targetSdkVersion1
        versionCode 1
        versionName "1.0"
        flavorDimensions "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }


    viewBinding {
        enabled = true
    }

    sourceSets {
        main {
            //修改jni libs的so文件存放位置到libs目录
            jniLibs.srcDirs  = ["libs"]
            //修改资源文件夹
            res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player']
        }
    }

    productFlavors {
        Baidu {

        }
        QQ {

        }
        HUAWEI{

        }
    }

}
/**
 * 在外边修改也可以
 */
//this.android.sourceSets {
//    main {
//        //修改jni libs的so文件存放位置到libs目录
//        jniLibs.srcDirs  = ["libs"]
//        //修改资源文件夹
//        res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player']
//    }
//}

dependencies {
    implementation project(':module_groovy')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libAndroidAppcompat
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.networkbench.newlens.agent.android:nbs.newlens.agent:2.14.10'
    implementation 'com.networkbench.newlens.agent.android2:nbs.newlens.nativecrash:2.0.0'
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"


}

this.getParentProject()

def getParentProject() {
    def name = this.getParent().name
    println this.getProject().getName() +"  ,the parent project name is ${name}"
}



/**
 *   ./gradlew apkcopy
 */
//拷贝apk到downloads目录
task("apkcopy") {
    //gradle的执行阶段去执行
    doLast {
        def sourcePath = this.buildDir.path + "/outputs/apk/"
        def destPath = "/Users/gmu/Downloads/apkcopy"
        /**
         * cp [options] source dest
         * -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。
         */
        def command = "cp -r ${sourcePath} ${destPath}"
        this.exec {
            try {
                executable "bash"
                args "-c", command
                println "the command is execute success"
            } catch (GradleException e) {
                println "the command is execute failed"
            }
        }
    }
}


