pluginManagement {
    repositories {
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.aliyun.com/repository/releases' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.aliyun.com/repository/releases' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        google()
        mavenCentral()
    }
}
rootProject.name = "WingAndroid"

/**
 * setting.gradle对应的是gradle中的Settings对象
 * https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html
 */
if (this.hasProperty("isIncludeModuleGroovy")? isIncludeModuleGroovy.toBoolean():false) {
    include ':module_groovy'
}
include ':module_asm'
include ':app'
include ':wingannotation'
include ':blockcanary:blockcanary-analyzer'
include ':blockcanary:blockcanary-android'
include ':blockcanary:blockcanary-android-no-op'
include ':module_volley'

rootProject.name = "WingAndroid"

println "初始化阶段开始。。。"


def wbapi(String proName, Closure configureClosure) {
    try {
        def ppp = project(proName)
        if (configureClosure == null) {
            project.dependencies.api(ppp)
            getProject().dependencies.add()
        } else {
            project.dependencies.api(ppp, configureClosure)
        }
        sdkProjectDependencies.add(ppp)
    } catch (UnknownProjectException e) {
        chageDependency(proName, configureClosure)
    }
}